import { Text, Card, Group, ActionIcon, Select } from "@mantine/core";
import { DataTable, DataTableSortStatus } from "mantine-datatable";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCopy } from "@fortawesome/free-solid-svg-icons";
import { useEffect, useState } from "react";
import { SearchField } from "@components/searchfield";
import { useQuery } from "@tanstack/react-query";
import api from "@api/index";
import { RustError } from "$types/index";
import { useTranslateRustError } from "@hooks/index";
import { SendNotificationToWindow, paginate, sortArray } from "@utils/index";
import { useForm } from "@mantine/form";
import dayjs from "dayjs";
// Generated by https://quicktype.io

export interface TradeObject {
  id: string;
  crated_at: string;
  current_trade_logs: string[];
  offerings: TradeItem[];
  receiving: TradeItem[];
  total_platinum: number;
  trade_type: string;
  user_name: string;
}
export interface TradeItem {
  display_name: string;
  name: string;
  quantity: number;
  rank: number;
  wfm_id: null | string;
  wfm_url_name: null | string;
}

export const Trades = () => {
  // States For DataGrid
  const [page, setPage] = useState(1);
  const pageSizes = [5, 10, 15, 20, 25, 30, 50, 100];
  const [pageSize, setPageSize] = useState(pageSizes[4]);
  const [rows, setRows] = useState<TradeObject[]>([]);
  const [totalRecords, setTotalRecords] = useState<number>(0);
  const [sortStatus, setSortStatus] = useState<DataTableSortStatus>({ columnAccessor: 'price', direction: 'desc' });
  const [query, setQuery] = useState<string>("");

  const { data: items } = useQuery({
    queryKey: ['d'],
    queryFn: () => api.debug.get_trades(),
    onError(error: RustError) {
      SendNotificationToWindow(useTranslateRustError("title", { component: error.component }), useTranslateRustError("message", { loc: error.component }));
    }
  })

  const filterForm = useForm({
    initialValues: {
      trade_type: "",
    },
  });


  // Update DataGrid Rows
  useEffect(() => {
    if (!items)
      return;
    let rivensFilter = items as TradeObject[];

    if (filterForm.values.trade_type !== "") {
      rivensFilter = rivensFilter.filter((riven) => riven.trade_type.toLowerCase().includes(filterForm.values.trade_type.toLowerCase()));
    }
    if (query !== "") {
      rivensFilter = rivensFilter.filter((riven) => riven.user_name.toLowerCase().includes(query.toLowerCase()));
    }
    setTotalRecords(rivensFilter.length);
    rivensFilter = sortArray([{
      field: sortStatus.columnAccessor,
      direction: sortStatus.direction
    }], rivensFilter);
    rivensFilter = paginate(rivensFilter, page, pageSize);
    setRows(rivensFilter);
  }, [query, pageSize, page, sortStatus, filterForm.values])


  return (
    <Card>
      <Group position="apart" mb="xs">
        <Text weight={500}>Trades</Text>
      </Group>
      <SearchField value={query} onChange={(text) => setQuery(text)} />
      <DataTable
        sx={{ marginTop: "20px" }}
        height={`calc(100vh - 270px)`}
        striped
        idAccessor={(row) => `${row.id}${row.crated_at}${Math.random() * 1000}`}
        withColumnBorders
        records={rows}
        page={page}
        onPageChange={setPage}
        totalRecords={totalRecords}
        recordsPerPage={pageSize}
        recordsPerPageOptions={pageSizes}
        onRecordsPerPageChange={setPageSize}
        sortStatus={sortStatus}
        onSortStatusChange={setSortStatus}
        // define columns
        columns={[
          {
            accessor: 'id',
            title: "ID",
          },
          {
            accessor: 'crated_at',
            title: "Crated At",
            render: ({ crated_at }) => {
              return (
                <Text>{dayjs(crated_at).format("DD.MM.YYYY HH:mm")}</Text>
              )
            }
          },
          {
            accessor: 'user_name',
            title: "User Name",
            sortable: true,
          },
          {
            accessor: 'offerings',
            title: "Offerings",
            render: ({ offerings }) => {
              return (
                <Text>{offerings.map((offering) => `${offering.display_name} x${offering.quantity}`).join(", ")}</Text>
              )
            }
          },
          {
            accessor: 'receiving',
            title: "Receiving",
            render: ({ receiving }) => {
              return (
                <Text>{receiving.map((offering) => `${offering.display_name} x${offering.quantity}`).join(", ")}</Text>
              )
            }
          },
          {
            accessor: 'trade_type',
            title: "Trade Type",
            sortable: true,
            filter: (
              <Select
                value={filterForm.values.trade_type}
                onChange={(event) => filterForm.setFieldValue('trade_type', event || "")}
                data={[
                  { value: "", label: "Any" },
                  { value: "Trade", label: "Trade" },
                  { value: "Sale", label: "Sale" },
                  { value: "Purchase", label: "Purchase" },
                ]}
              />
            ),
          },
          {
            accessor: 'total_platinum',
            title: "Total Platinum",
            sortable: true,
          },
          {
            accessor: 'actions',
            width: 150,
            title: "Actions",
            render: ({ current_trade_logs }) =>
              <Group position="right" >
                <ActionIcon variant="filled" onClick={async () => {
                  await api.debug.simulate_trade(current_trade_logs);
                }} >
                  <FontAwesomeIcon icon={faCopy} />
                </ActionIcon>
              </Group>
          },
        ]}
      />
    </Card>
  );
}